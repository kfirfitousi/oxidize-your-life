import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import { api } from "@/utils/api";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useState } from "react";
import { Cog, Github, ExternalLink, Box } from "lucide-react";
import Image from "next/image";
import { Rewrite } from "@prisma/client";

const Home: NextPage = () => {
  const rewritesList = api.rewrites.getList.useQuery();
  const popular = api.rewrites.getPopular.useQuery();
  const newest = api.rewrites.getNewest.useQuery();
  const { data: sessionData } = useSession();
  const [input, setInput] = useState("");

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="grid min-h-screen grid-rows-[min-content_1fr]">
        <section className="grid h-full grid-cols-[1fr_minmax(0,1024px)_1fr] grid-rows-[min-content_1fr] bg-slate-700 px-6 text-slate-300 sm:px-12">
          <nav className="col-start-2 flex items-center justify-between py-4">
            <Link
              href="/"
              className="text-lg font-bold hover:text-slate-100 sm:text-2xl"
            >
              rustrewrite.it
            </Link>
            <button
              className="hover:text-slate-100"
              onClick={sessionData ? () => void signOut() : () => void signIn()}
            >
              <div className="flex items-center gap-2">
                {sessionData ? (
                  <>
                    <Image
                      src={
                        sessionData.user.image ||
                        "https://avatars.githubusercontent.com/u/0"
                      }
                      alt={sessionData.user.name || ""}
                      className="rounded-full"
                      width={24}
                      height={24}
                    />
                    <p>Sign out</p>
                  </>
                ) : (
                  <>
                    <Github className="h-5 w-5" />
                    <p>Sign in</p>
                  </>
                )}
              </div>
            </button>
          </nav>
          <section className="col-start-2 flex flex-col items-center justify-center gap-2 pb-8">
            <h1 className="text-2xl font-bold sm:text-3xl md:text-4xl">
              Rewrite it in Rust
            </h1>
            <h2 className="pb-4 text-center text-lg sm:text-xl md:text-2xl">
              A collection of software rewritten in Rust
            </h2>
            <Command className="relative max-w-xl overflow-visible">
              <CommandInput
                placeholder="Search..."
                value={input}
                onValueChange={(value) => setInput(value)}
              />
              {input.length > 0 && (
                <CommandList className="absolute top-9 w-full rounded-b-lg bg-white">
                  <CommandEmpty>No results found.</CommandEmpty>
                  <CommandGroup>
                    {rewritesList.data?.map((rewrite) => (
                      <Link href={`/${rewrite.name}`} key={rewrite.name}>
                        {" "}
                        <CommandItem className="flex cursor-pointer items-center gap-2">
                          <Cog className="h-5 w-5" />
                          <span className="font-semibold">{rewrite.name}</span>
                          <span className="font-light">
                            {rewrite.description}
                          </span>
                          <span className="ml-auto">
                            <span className="font-light">rewrite of </span>
                            <span className="font-semibold">
                              {rewrite.of.name}
                            </span>
                          </span>
                        </CommandItem>
                      </Link>
                    ))}
                  </CommandGroup>
                </CommandList>
              )}
            </Command>
          </section>
        </section>
        <section className="min-h-full bg-slate-300 p-6 sm:p-12">
          <Tabs defaultValue="popular" className="mx-auto max-w-5xl">
            <TabsList>
              <TabsTrigger value="popular">Popular</TabsTrigger>
              <TabsTrigger value="newest">New</TabsTrigger>
            </TabsList>
            <TabsContent value="popular" className="border-none p-0">
              <div className="grid grid-cols-1 grid-rows-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
                {popular.data?.map((rewrite) => (
                  <RewriteCard rewrite={rewrite} key={rewrite.name} />
                ))}
              </div>
            </TabsContent>
            <TabsContent value="newest" className="border-none p-0">
              <div className="grid grid-cols-1 grid-rows-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
                {newest.data?.map((rewrite) => (
                  <RewriteCard rewrite={rewrite} key={rewrite.name} />
                ))}
              </div>
            </TabsContent>
          </Tabs>
        </section>
      </main>
    </>
  );
};

export default Home;

function RewriteCard({ rewrite }: { rewrite: Rewrite }) {
  return (
    <div
      className="aspect-video w-full p-2 sm:aspect-square"
      key={rewrite.name}
    >
      <div className="block flex h-full flex-col rounded bg-slate-200 p-4 text-slate-700">
        <Link
          href={`/${rewrite.name}`}
          className="text-lg font-semibold hover:underline"
        >
          {rewrite.name}
        </Link>
        <p className="text-sm">{rewrite.description}</p>
        <div className="mt-auto flex flex-col">
          {rewrite.url && (
            <a
              href={rewrite.url}
              target="_blank"
              rel="noopener noreferrer"
              className="flex items-center gap-1 text-sm text-slate-500 hover:underline"
            >
              <ExternalLink className="h-4 w-4" />
              <span>{rewrite.url}</span>
            </a>
          )}
          {rewrite.github && (
            <a
              href={rewrite.github}
              target="_blank"
              rel="noopener noreferrer"
              className="flex items-center gap-1 text-sm text-slate-500 hover:underline"
            >
              <Github className="h-4 w-4" />
              <span>{rewrite.github}</span>
            </a>
          )}
          {rewrite.crates && (
            <a
              href={rewrite.crates}
              target="_blank"
              rel="noopener noreferrer"
              className="flex items-center gap-1 text-sm text-slate-500 hover:underline"
            >
              <Box className="h-4 w-4" />
              <span>{rewrite.crates}</span>
            </a>
          )}
        </div>
      </div>
    </div>
  );
}
